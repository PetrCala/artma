name: Build & Create Tag

on:
  pull_request:
    branches:
      - master
    types: [closed]

jobs:
  labelChecks:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest

    outputs:
      READY_TO_BUILD: ${{ steps.labelCheck.outputs.READY_TO_BUILD }}
      SEMVER_LEVEL: ${{ steps.labelCheck.outputs.SEMVER_LEVEL }}
      SKIP_CRAN: ${{ steps.labelCheck.outputs.SKIP_CRAN }}
      SKIP_VERSION_BUMP: ${{ steps.labelCheck.outputs.SKIP_VERSION_BUMP }}

    steps:
      - name: Determine labels from PR
        id: labelCheck
        run: |
          label_names='${{ toJson(github.event.pull_request.labels) }}'

          ready_to_build="false"
          skip_cran="false"
          skip_version_bump="false"

          declare -A label_map=(
            ["release:next-version"]="ready_to_build"
            ["release:skip-cran"]="skip_cran"
            ["release:skip-version-bump"]="skip_version_bump"
          )

          for label in "${!label_map[@]}"; do
            if echo "$label_names" | jq -e ".[] | select(.name == \"$label\")" >/dev/null; then
              eval "${label_map[$label]}=true"
            fi
          done

          semver_labels=$(echo "$label_names" | jq -r '[.[] | select(.name | startswith("v-")) | .name]')
          label_count=$(echo "$semver_labels" | jq 'length')

          semver_level="patch"
          if ((label_count > 1)); then
            echo "Error: more than one label starting with 'v-' found." >&2
            exit 1
          elif ((label_count == 1)); then
            semver_level=$(echo "$semver_labels" | jq -r '.[0]' | sed 's/^v-//')
            echo "Assigned semver level: $semver_level"
          fi

          echo "READY_TO_BUILD=$ready_to_build" >> "$GITHUB_OUTPUT"
          echo "SEMVER_LEVEL=$semver_level" >> "$GITHUB_OUTPUT"
          echo "SKIP_CRAN=$skip_cran" >> "$GITHUB_OUTPUT"
          echo "SKIP_VERSION_BUMP=$skip_version_bump" >> "$GITHUB_OUTPUT"
        shell: bash

  preBuild:
    runs-on: ubuntu-latest
    needs: [labelChecks]
    if: ${{ needs.labelChecks.outputs.READY_TO_BUILD == 'true' && github.event.pull_request.merged == true }}
    outputs:
      NEW_VERSION: ${{ steps.getNewVersion.outputs.NEW_VERSION }}
      ARTIFACTS: ${{ steps.getPrebuildArtifacts.outputs.ARTIFACTS }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: master
          # The ARTMA_BOT_COMMIT_TOKEN is a personal access token tied to ArtmaBot
          # This is a workaround to allow pushes to a protected branch
          token: ${{ secrets.ARTMA_BOT_COMMIT_TOKEN }}

      - name: Set up pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::remotes, any::devtools

      - name: Check for R CMD check
        id: rcmdCheck
        run: |
          Rscript -e '
            results <- devtools::check(args = c("--as-cran", "--no-manual", "--no-build-vignettes"))
            status <- ifelse(length(results$errors) == 0 && length(results$warnings) == 0, "success", "failure")
            cat("CHECK_STATUS=", status, "\n", file = Sys.getenv("GITHUB_OUTPUT"), sep="")
          '
        continue-on-error: false

      # - name: Check reverse dependencies
      #   id: rcmdCheckReverse
      #   run: |
      #     # The library must be added and loaded first
      #     Rscript -e 'revdepcheck::revdep_check(num_workers = 4)'
      #   continue-on-error: false

      - name: Get current versions
        id: getCurrentVersions
        run: |
          OLD_VERSION=$(Rscript -e "cat(as.character(desc::desc_get_version()))")
          CRAN_VERSION=$(Rscript ./scripts/R/get_cran_version.R)
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "CRAN_VERSION=$CRAN_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bumpVersion
        if: ${{ needs.labelChecks.outputs.SKIP_VERSION_BUMP != 'true' }}
        uses: ./.github/actions/composite/bumpVersion
        with:
          SEMVER_LEVEL: ${{ needs.labelChecks.outputs.SEMVER_LEVEL }}
          ARTMA_BOT_COMMIT_TOKEN: ${{ secrets.ARTMA_BOT_COMMIT_TOKEN }}
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Update NEWS.md
        if: ${{ needs.labelChecks.outputs.SKIP_VERSION_BUMP != 'true' }}
        uses: ./.github/actions/composite/updateNews
        with:
          NEW_VERSION: ${{ steps.bumpVersion.outputs.NEW_VERSION }}
          ARTMA_BOT_COMMIT_TOKEN: ${{ secrets.ARTMA_BOT_COMMIT_TOKEN }}
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Get new version
        id: getNewVersion
        run: |
          NEW_VERSION="${{ steps.bumpVersion.outputs.NEW_VERSION }}"
          if [ -z "$NEW_VERSION" ]; then
            # If the version was not bumped, use the old version
            NEW_VERSION="${{ steps.getCurrentVersions.outputs.OLD_VERSION }}"
          fi
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create release notes
        run: |
          Rscript ./scripts/R/get_release_notes.R \
            --new-version "${{ steps.getNewVersion.outputs.NEW_VERSION }}"

      - name: Generate cran-comments.md
        run: |
          Rscript ./scripts/R/generate_cran_comments.R \
            --cran-version "${{ steps.getCurrentVersions.outputs.CRAN_VERSION }}" \
            --new-version "${{ steps.getNewVersion.outputs.NEW_VERSION }}" \
            --manual-file "manual_cran_comments.md" \
            --check-status "${{ steps.rcmdCheck.outputs.CHECK_STATUS }}"

      - name: Create job metadata
        id: createJobMetadata
        shell: bash
        run: |
          jq -n \
            --arg OLD_VERSION "${{ steps.getCurrentVersions.outputs.OLD_VERSION }}" \
            --arg CRAN_VERSION "${{ steps.getCurrentVersions.outputs.CRAN_VERSION }}" \
            --arg NEW_VERSION "${{ steps.getNewVersion.outputs.NEW_VERSION }}" \
            --arg TAG_NAME "v${{ steps.getNewVersion.outputs.NEW_VERSION }}" \
            --arg BUILD_ARTIFACT "artma_${{ steps.getNewVersion.outputs.NEW_VERSION }}.tar.gz" \
            --arg SKIP_CRAN "${{ needs.labelChecks.outputs.SKIP_CRAN }}" \
            '{$OLD_VERSION, $CRAN_VERSION, $NEW_VERSION, $TAG_NAME, $BUILD_ARTIFACT, $SKIP_CRAN}' > metadata.json

      - name: Get prebuild artifacts
        id: getPrebuildArtifacts
        run: |
          ./.github/scripts/checkArtifacts.sh 'prebuild-artifacts.txt'
          {
            echo 'ARTIFACTS<<EOF'
            cat './.github/scripts/prebuild-artifacts.txt'
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Upload the prebuild artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-artifacts
          path: ${{ steps.getPrebuildArtifacts.outputs.ARTIFACTS }}

  build:
    runs-on: ubuntu-latest
    needs: [labelChecks, preBuild]
    outputs:
      ARTIFACTS: ${{ steps.getBuildArtifacts.outputs.ARTIFACTS }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: master
          # The ARTMA_BOT_COMMIT_TOKEN is a personal access token tied to ArtmaBot
          # This is a workaround to allow pushes to a protected branch
          token: ${{ secrets.ARTMA_BOT_COMMIT_TOKEN }}

      - name: Set up pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::remotes, any::devtools

      - name: Download prebuild artifacts
        uses: actions/download-artifact@v4
        with:
          name: prebuild-artifacts

      - name: Set job metadata
        id: setJobMetadata
        run: |
          while IFS="=" read -r key value; do
            echo "$key=$value" >> $GITHUB_OUTPUT
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' metadata.json)

      - name: Build documentation
        run: |
          Rscript -e 'devtools::document()'

      - name: Build the .tar.gz
        run: |
          pkg_version <- devtools::as.package('.')$version
          if (pkg_version != Sys.getenv("NEW_VERSION")) {
            # This means the version was not bumped
            cli::cli_abort("Version mismatch: {pkg_version} != {Sys.getenv('NEW_VERSION')}")
          }
          source("./scripts/R/release.R")
          build_pkg(
            pkg = ".",
            path = "./${{ steps.setJobMetadata.outputs.BUILD_ARTIFACT }}"
          )
        env:
          NEW_VERSION: ${{ needs.preBuild.outputs.NEW_VERSION }}
        shell: Rscript {0}

      - name: Get build artifacts
        id: getBuildArtifacts
        run: |
          {
            echo 'ARTIFACTS<<EOF'
            echo ${{ steps.setJobMetadata.outputs.BUILD_ARTIFACT }}
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Upload R package artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{ steps.getBuildArtifacts.outputs.ARTIFACTS }}
          include-hidden-files: true

  postBuild:
    runs-on: ubuntu-latest
    needs: [preBuild, build]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: master
          token: ${{ secrets.ARTMA_BOT_COMMIT_TOKEN }}

      - name: Download the artifacts
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded artifacts
        run: ls -R

      - name: Extract the artifacts
        run: |
          cp -r prebuild-artifacts/* .
          ./.github/scripts/checkArtifacts.sh 'prebuild-artifacts.txt'

          # Rename the build artifact to include .gz extension as expected
          mv build-artifacts/* "${{ needs.build.outputs.ARTIFACTS }}"
          ./.github/scripts/checkArtifacts.sh 'build-artifacts.txt'

      - name: Unpack the metadata
        id: unpackMetadata
        run: |
          while IFS="=" read -r key value; do
            echo "$key=$value" >> $GITHUB_OUTPUT
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' metadata.json)

      - name: Push tag to GitHub
        run: |
          git fetch --tags
          git tag ${{ steps.unpackMetadata.outputs.TAG_NAME }}
          git push origin ${{ steps.unpackMetadata.outputs.TAG_NAME }}

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.unpackMetadata.outputs.TAG_NAME }}
          files: |
            ${{ needs.preBuild.outputs.ARTIFACTS }}
            ${{ needs.build.outputs.ARTIFACTS }}
          body_path: ./release-notes.md
          draft: false
          prerelease: false
