name: Build & Create Tag

on:
  pull_request:
    branches:
      - master
    types: [closed]

jobs:
  labelChecks:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest

    outputs:
      READY_TO_BUILD: ${{ steps.labelCheck.outputs.READY_TO_BUILD }}
      SEMVER_LEVEL: ${{ steps.labelCheck.outputs.SEMVER_LEVEL }}
      SKIP_CRAN: ${{ steps.labelCheck.outputs.SKIP_CRAN }}

    steps:
      - name: Determine labels from PR
        id: labelCheck
        run: |
          label_names='${{ toJson(github.event.pull_request.labels) }}'

          ready_to_build="false"
          skip_cran="false"

          if echo "$label_names" | jq -e '.[] | select(.name == "release:next-version")' >/dev/null; then
            ready_to_build="true"
          fi

          if echo "$label_names" | jq -e '.[] | select(.name == "release:skip-cran")' >/dev/null; then
            skip_cran="true"
          fi

          semver_labels=$(echo "$label_names" | jq -r '[.[] | select(.name | startswith("v-")) | .name]')
          label_count=$(echo "$semver_labels" | jq 'length')

          semver_level="patch"
          if ((label_count > 1)); then
            echo "Error: more than one label starting with 'v-' found." >&2
            exit 1
          elif ((label_count == 1)); then
            semver_level=$(echo "$semver_labels" | jq -r '.[0]' | sed 's/^v-//')
            echo "Assigned semver level: $semver_level"
          fi

          echo "READY_TO_BUILD=$ready_to_build" >> "$GITHUB_OUTPUT"
          echo "SEMVER_LEVEL=$semver_level" >> "$GITHUB_OUTPUT"
          echo "SKIP_CRAN=$skip_cran" >> "$GITHUB_OUTPUT"
        shell: bash


  build:
    runs-on: ubuntu-latest
    needs: [labelChecks]
    if: ${{ needs.labelChecks.outputs.READY_TO_BUILD == 'true' && github.event.pull_request.merged == true }}
    outputs:
      NEW_VERSION: ${{ steps.setJobOutput.outputs.NEW_VERSION }}
      PKG_ARTIFACT: ${{ steps.setJobOutput.outputs.PKG_ARTIFACT }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: master
          # The ARTMA_BOT_COMMIT_TOKEN is a personal access token tied to ArtmaBot
          # This is a workaround to allow pushes to a protected branch
          token: ${{ secrets.ARTMA_BOT_COMMIT_TOKEN }}

      - name: Set up pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::remotes, any::devtools, local::.

      - name: Build documentation
        run: |
          Rscript -e 'devtools::document()'

      - name: Check for R CMD check
        id: rcmdCheck
        run: |
          Rscript -e '
            results <- devtools::check(args = c("--as-cran", "--no-manual", "--no-build-vignettes"))
            status <- ifelse(length(results$errors) == 0 && length(results$warnings) == 0, "success", "failure")
            cat("CHECK_STATUS=", status, "\n", file = Sys.getenv("GITHUB_OUTPUT"), sep="")
          '
        continue-on-error: false

      # - name: Check reverse dependencies
      #   id: rcmdCheckReverse
      #   run: |
      #     # The library must be added and loaded first
      #     Rscript -e 'revdepcheck::revdep_check(num_workers = 4)'
      #   continue-on-error: false

      - name: Get current versions
        id: getCurrentVersions
        run: |
          CURRENT_VERSION=$(Rscript -e "cat(as.character(desc::desc_get_version()))")
          CRAN_VERSION=$(Rscript ./scripts/R/get_cran_version.R)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "CRAN_VERSION=$CRAN_VERSION" >> $GITHUB_OUTPUT

      - name: Bump the package version locally
        id: bumpVersion
        run: |
          Rscript ./scripts/R/bump_version.R ${{ needs.labelChecks.outputs.SEMVER_LEVEL }}

      - name: Update NEWS.md
        uses: ./.github/actions/composite/updateNews
        with:
          NEW_VERSION: ${{ steps.bumpVersion.outputs.NEW_VERSION }}
          ARTMA_BOT_COMMIT_TOKEN: ${{ secrets.ARTMA_BOT_COMMIT_TOKEN }}
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Download NEWS.md from previous job
        uses: actions/download-artifact@v4
        with:
          # Gets bundled during the package build
          name: NEWS.md

      - name: Create release notes
        run: |
          Rscript ./scripts/R/get_release_notes.R \
            --new-version "${{ steps.bumpVersion.outputs.NEW_VERSION }}"

      - name: Generate cran-comments.md
        run: |
          Rscript ./scripts/R/generate_cran_comments.R \
            --cran-version "${{ steps.getCurrentVersions.outputs.CRAN_VERSION }}" \
            --new-version "${{ steps.bumpVersion.outputs.NEW_VERSION }}" \
            --manual-file "manual_cran_comments.md" \
            --check-status "${{ steps.rcmdCheck.outputs.CHECK_STATUS }}"

      - name: Create job metadata
        id: createJobMetadata
        shell: bash
        run: |
          jq -n \
            --arg CURRENT_VERSION "${{ steps.getCurrentVersions.outputs.CURRENT_VERSION }}" \
            --arg CRAN_VERSION "${{ steps.getCurrentVersions.outputs.CRAN_VERSION }}" \
            --arg NEW_VERSION "${{ steps.bumpVersion.outputs.NEW_VERSION }}" \
            --arg TAG_NAME "v${{ steps.bumpVersion.outputs.NEW_VERSION }}" \
            --arg PKG_ARTIFACT "artma_${{ steps.bumpVersion.outputs.NEW_VERSION }}.tar.gz" \
            --arg SKIP_CRAN "${{ needs.labelChecks.outputs.SKIP_CRAN }}" \
            '{$CURRENT_VERSION, $CRAN_VERSION, $NEW_VERSION, $TAG_NAME, $PKG_ARTIFACT, $SKIP_CRAN}' > metadata.json

      - name: Set job output
        id: setJobOutput
        run: |
          while IFS="=" read -r key value; do
            echo "$key=$value" >> $GITHUB_OUTPUT
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' metadata.json)

      - name: Build the .tar.gz
        run: |
          source("./scripts/R/release.R")
          build_pkg(
            pkg = ".",
            path = "./${{ steps.setJobOutput.outputs.PKG_ARTIFACT }}"
          )
        shell: Rscript {0}

      - name: Check expected files exist
        run: |
          required_files=(
            *.tar.gz
            cran-comments.md
            metadata.json
            NEWS.md
            release_notes.md
          )

          missing=0

          for file in "${required_files[@]}"; do
          if ! compgen -G "$file" > /dev/null; then
            echo "❌ Missing expected file: $file"
            missing=1
          fi

          if [ "$missing" -eq 1 ]; then
            echo "One or more expected files are missing. Failing the job."
            exit 1
          fi

      - name: Upload R package artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.setJobOutput.outputs.PKG_ARTIFACT }}
          path: |
            *.tar.gz
            cran-comments.md
            metadata.json
            NEWS.md
            release_notes.md
          include-hidden-files: true

  createNewVersion:
    uses: ./.github/workflows/create-new-version.yaml
    needs: [labelChecks, build]
    with:
      SEMVER_LEVEL: ${{ needs.labelChecks.outputs.SEMVER_LEVEL }}
    secrets: inherit

  postBuild:
    runs-on: ubuntu-latest
    needs: [build, createNewVersion]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: master
          token: ${{ secrets.ARTMA_BOT_COMMIT_TOKEN }}

      - name: Download the package artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.PKG_ARTIFACT }}

      - name: Unpack the metadata
        id: unpackMetadata
        run: |
          while IFS="=" read -r key value; do
            echo "$key=$value" >> $GITHUB_OUTPUT
          done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' metadata.json)

      - name: Push tag to GitHub
        run: |
          git fetch --tags
          git tag ${{ steps.unpackMetadata.outputs.TAG_NAME }}
          git push origin ${{ steps.unpackMetadata.outputs.TAG_NAME }}

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.unpackMetadata.outputs.TAG_NAME }}
          files: |
            *.tar.gz
            cran-comments.md
            metadata.json
            NEWS.md
            release_notes.md
          body_path: ./release_notes.md
          draft: false
          prerelease: false
