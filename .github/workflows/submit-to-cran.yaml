name: Submit to CRAN

on:
  create:
    tags:
      - v*

env:
  SHOULD_USE_DEVTOOLS: 'false'

jobs:
  getTagName:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.getTag.outputs.tag }}
    steps:
      - name: Get tag name
        id: getTag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

  submitToCran:
    runs-on: ubuntu-latest
    needs: getTagName
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          # Checkout to the tag that was used for the release
          ref: ${{ needs.getTagName.outputs.tag }}

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::curl, any::httr

      - name: Fetch and download release assets
        id: assets
        run: |
          TAG="${{ needs.getTagName.outputs.tag }}"
          REPO="${{ github.repository }}"
          ASSETS=$(curl -s "https://api.github.com/repos/${REPO}/releases/tags/${TAG}" | jq -rc '.assets[]')

          for row in $(echo "$ASSETS"); do
            NAME=$(echo "$row" | jq -r '.name')
            URL=$(echo "$row" | jq -r '.browser_download_url')
            echo "Downloading $NAME"
            curl -L -o "$NAME" "$URL"
          done

          METADATA_JSON=$(cat metadata.json)
          jq -r 'to_entries[] | "\(.key)=\(.value)"' <<< "$METADATA_JSON" >> "$GITHUB_OUTPUT"

      - name: Submit to CRAN
        if: steps.assets.outputs.SKIP_CRAN != 'true'
        env:
          USE_DEVTOOLS: ${{ env.SHOULD_USE_DEVTOOLS }}
          PKG_ARTIFACT: ${{ steps.assets.outputs.PKG_ARTIFACT }}
        run: |
          if (Sys.getenv("USE_DEVTOOLS") == 'true') {
            cli::cli_inform("Submitting via devtools")
            unlockBinding("yesno", asNamespace("devtools"))
            assign("yesno", function(...) FALSE, asNamespace("devtools"))
            lockBinding("yesno", asNamespace("devtools"))

            devtools::build_vignettes()
            devtools::document()
            devtools::submit_cran()
          } else {
            cli::cli_inform("Submitting via custom script")

            built_path <- Sys.getenv("PKG_ARTIFACT")
            if (!file.exists(built_path)) {
              cli::cli_abort("File {.file {built_path}} does not exist.")
              }

            source("./scripts/R/release.R")
            submit_cran(pkg = ".", built_path = built_path)
          }
        shell: Rscript {0}
